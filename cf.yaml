AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for a containerized web application on AWS ECS Fargate.

# Parameters allow for customization of the CloudFormation stack without changing the template.
Parameters:

  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for the VPC'

  PublicSubnet1Cidr:
    Type: String
    Default: '10.0.1.0/24'
    Description: 'CIDR block for Public Subnet 1'

  PublicSubnet2Cidr:
    Type: String
    Default: '10.0.2.0/24'
    Description: 'CIDR block for Public Subnet 2'

  PrivateSubnet1Cidr:
    Type: String
    Default: '10.0.3.0/24'
    Description: 'CIDR block for Private Subnet 1'

  PrivateSubnet2Cidr:
    Type: String
    Default: '10.0.4.0/24'
    Description: 'CIDR block for Private Subnet 2'
    
  TaskCpu:
    Type: String
    Default: '512'
    Description: 'The amount of CPU to allocate for the ECS Task'

  TaskMemory:
    Type: String
    Default: '1024'
    Description: 'The amount of memory (in MiB) to allocate for the ECS Task'

  MaxAutoScalingCapacity:
    Type: Number
    Default: 5
    Description: 'Maximum number of tasks to scale out in ECS Service'

  MinAutoScalingCapacity:
    Type: Number
    Default: 2
    Description: 'Minimum number of tasks in ECS Service'

  DockerImage:
    Type: String
    Default: 'fstep/devops-task:latest'
    Description: 'Docker image to be used in the ECS Task'

# Define all the AWS resources to be created.

Resources:
# VPC for network isolation.
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true

 # Internet Gateway for connecting the VPC to the Internet.
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

# Attaches the Internet Gateway to the VPC.
  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: 'GatewayAttachment'
    Properties:
      Domain: 'vpc'

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP.AllocationId'
      SubnetId: !Ref PublicSubnet1  # Assuming NAT Gateway is placed in PublicSubnet1

  # Defines public subnets in a VPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  # Public Route Table for the VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'PublicRouteTable'

  # Route for Public Route Table to the Internet Gateway
  PublicRouteToIGW:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Association of Public Route Table with Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Association of Public Route Table with Public Subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Defines private subnets for ECS Fargate tasks.
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'PrivateRouteTable'
          
  # Routes for Private Route Table
  PrivateRouteToNAT:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  # Association of Private Route Table with Private Subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Association of Private Route Table with Private Subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  #Creates a Network ACL for managing access to the public subnets.
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Network ACL

  # Inbound HTTP rule for the Network ACL.
  InboundHTTPRule:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: '6' # TCP
      PortRange:
        From: '80'
        To: '80'
      Egress: false
      RuleAction: 'allow'
      CidrBlock: '0.0.0.0/0'
  
  # Outbound rule for the Network ACL allowing all traffic.
  OutboundRule:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: 100
      Protocol: '-1' # All traffic
      Egress: true
      RuleAction: 'allow'
      CidrBlock: '0.0.0.0/0'

  # Associates the Network ACL with public subnets
  PublicSubnet1NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet2NetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  #IAM Role for ECS tasks, allowing them to interact with AWS services.
  ECSExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'ECSTaskExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'


  # ECS Cluster to host the application.
  ECSCluster:
    Type: 'AWS::ECS::Cluster'



  # Security Group for the ECS service, defining traffic rules.

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ECS Security Group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: '0.0.0.0/0'

  # ECS Service to manage and run ECS tasks.
  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn: 'ALBListener'
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: 'FARGATE'
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup

  # Task Definition for the ECS service, defining the application container.
  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'web-application'
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
        - 'FARGATE'
      ExecutionRoleArn: !Ref ECSExecutionRole
      ContainerDefinitions:
        - Name: 'web-app'
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'ecs'

  # Scalable Target for the ECS service, defining the auto-scaling policy.
  ECSServiceScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: !Ref MaxAutoScalingCapacity
      MinCapacity: !Ref MinAutoScalingCapacity
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService}'  # Format: service/clusterName/serviceName
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'

  # IAM Role for Application AutoScaling to modify ECS service.
  AutoscalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'application-autoscaling.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'AutoscalingPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecs:UpdateService'
                  - 'ecs:DescribeServices'
                Resource: '*'
  
  # Scaling Policy for the ECS service to handle load changes.
  ECSServiceScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: 'ECSServiceScalingPolicy'
      PolicyType: 'TargetTrackingScaling'
      ScalingTargetId: !Ref ECSServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: 'ECSServiceAverageCPUUtilization'
        TargetValue: 50.0  # Target CPU utilization percentage
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # Security Group for the Application Load Balancer, defining traffic rules.
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ALB Security Group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  # Application Load Balancer to distribute incoming traffic.
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: GatewayAttachment
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: 'application'

  # ALB Listener to forward traffic to the ECS service.
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: 'HTTP'

  # ALB Target Group to route traffic to the ECS service.
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref VPC
      TargetType: 'ip'
      HealthCheckProtocol: 'HTTP'
      HealthCheckPort: '3000'
      HealthCheckPath: '/'

  # CloudWatch Log Group for storing logs from the ECS service.
  CloudWatchLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/ecs/devops-task'  
      RetentionInDays: 30

  # SNS Topic for sending notifications.
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'ECS Notification Topic'

  # CloudWatch Alarm for monitoring CPU utilization.
  CPUUtilizationAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Alarm when CPU exceeds 80%'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/ECS'
      Statistic: 'Average'
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '80'
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions: 
        - !Ref SNSTopic
      Dimensions:
        - Name: 'ClusterName'
          Value: !Ref ECSCluster
        - Name: 'ServiceName'
          Value: !GetAtt ECSService.Name




# Output values that can be imported into other stacks or returned as results.
Outputs:
  ECSCLusterName:
    Description: 'Name of the ECS Cluster'
    Value: !Ref ECSCluster
  ECSTaskDefinition:
    Description: 'Task Definition ARN'
    Value: !Ref ECSTaskDefinition
  ECSService:
    Description: 'ECS Service Name'
    Value: !Ref ECSService
  ApplicationLoadBalancer:
    Description: 'URL of the Application Load Balancer'
    Value: !GetAtt 'ALB.DNSName'
